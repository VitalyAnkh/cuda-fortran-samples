! 
!     Copyright (c) 2017, NVIDIA CORPORATION.  All rights reserved.
!
! NVIDIA CORPORATION and its licensors retain all intellectual property
! and proprietary rights in and to this software, related documentation
! and any modifications thereto.
!
!
!    These example codes are a portion of the code samples from the companion
!    website to the book "CUDA Fortran for Scientists and Engineers":
!
! http://store.elsevier.com/product.jsp?isbn=9780124169708
!

module simpleOps_m
contains

  attributes(global) subroutine increment(a, b)
    implicit none
    integer, intent(inout) :: a(:)
    integer, value :: b
    integer :: i, n
    integer, allocatable :: my_test(:)

    allocate(my_test(10))
    print *, "xx"

    i = blockDim%x*(blockIdx%x-1) + threadIdx%x
    n = size(a)
    if (i <= n) a(i) = a(i)+b

  end subroutine increment

  attributes(global) subroutine increment2(a, b)
    implicit none
    integer, intent(inout) :: a(:)
    integer, value :: b
    integer :: i, n

    print *, "yyyyy"

    i = blockDim%x*(blockIdx%x-1) + threadIdx%x
    n = size(a)
    if (i <= n) a(i) = a(i)+b

  end subroutine increment2
end module simpleOps_m


program incrementTest  
  use cudafor
  use simpleOps_m
  implicit none
  integer, parameter :: n = 1024*1024
  integer, allocatable :: a(:)
  integer, device, allocatable :: a_d(:)
  integer, device, allocatable :: b_d(:)

  integer, device, allocatable :: global_count


  integer :: b, tPB = 256
  integer(kind=cuda_stream_kind) :: s1, s2

  integer :: nccl_stat, nccl_stat2

  nccl_stat = cudaStreamCreate(s1)
  nccl_stat2 = cudaStreamCreate(s2)

  print *, "s1: ", s1
  print *, "s2: ", s2

  allocate(a(n), a_d(n))
  allocate(b_d(n))
  a = 3
  b = 3

  a_d = a
  call increment2<<<132,132,0,s2>>>(a_d, b)

  call increment<<<132,132,0,s1>>>(b_d, 3)

  if (any(a /= 4)) then
     write(*,*) '**** Program Failed ****'
  else
     write(*,*) 'Program Passed'
  endif
  deallocate(a, a_d)
end program incrementTest
